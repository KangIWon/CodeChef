spring:
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 10MB
      enabled: true
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        use_sql_comments: true
  elasticsearch:
    username: ${ELASTIC_USERNAME}
    password: ${ELASTIC_PASSWORD}
    uris: ${ELASTIC_IP_PORT}  # Elasticsearch EC2 주소


    # 아래 누가 추가하셨는지 물어보기
  data:
    redis:
      host: ${REDIS_HOST_NAME}
  rabbitmq:
    username: ${RABBITMQ_DEFAULT_USER}
    password: ${RABBITMQ_DEFAULT_PASS}
    host: ${RABBITMQ_HOST}
    port:
      - ${RABBITMQ_PORT1}
      - ${RABBITMQ_PORT2}
#위에 elasticsearch가 있는데 아래 왜 추가 되었는지 물어보기
management:
  health:
    elasticsearch:
      enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
  kafka:
    bootstrap-servers: localhost:9092  # Kafka 서버 주소
    consumer:
      group-id: unique-chat-group-${random.uuid}  # 개별 사용자 단위로 설정하기 위해 유니크한 그룹 ID를 할당
      auto-offset-reset: earliest
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap-servers: localhost:9093

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

web-socket:
  secret:
    key: ${WEB_SOCKET_SECRET_KEY}

websocket:
  host: ${WEBSOCKET_HOST}
  port: ${WEBSOCKET_PORT}

s3:
  credentials:
    access-key: ${S3_CREDENTIALS_ACCESS_KEY}
    secret-key: ${S3_CREDENTIALS_SECRET_KEY}
    region: ${S3_CREDENTIALS_REGION}
  bucket: ${S3_BUCKET}

springdoc:
  swagger-ui:
    path: /api-test  # swagger-ui 접근 경로에 대한 별칭, 해당 주소로 접속해도 http://localhost:8080/swagger-ui/index.html로 리다이렉션 됨.

    groups-order: DESC # path, query, body, response 순으로 출력

    tags-sorter: alpha # 태그를 알파벳 순으로 정렬

    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능

  paths-to-match:
    - /api/** # swagger-ui에 표시할 api의 엔드포인트 패턴

cloudfront:
  url: ${CLOUD_FRONT_URL}

slack:
  webhook:
    url: ${SLACK_WEBHOOK_URL}

admin:
  token: ${ADMIN_TOKEN}

payment:
  toss:
    test_client_api_key: ${TOSS_TEST_CLIENT_API_KEY}
server:
  port: 8443 # HTTPS 기본 포트
  ssl:
    key-store: classpath:baeldung.p12
    key-store-password: 123456789
    key-store-type: PKCS12
