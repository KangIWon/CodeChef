spring:
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 10MB
      enabled: true
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        use_sql_comments: true
  elasticsearch:
    username: ${ELASTIC_USERNAME}
    password: ${ELASTIC_PASSWORD}
    uris: ${ELASTIC_IP_PORT}


management:
  health:
    elasticsearch:
      enabled: false

  kafka:
    bootstrap-servers: localhost:9092  # Kafka 서버 주소
    consumer:
      group-id: unique-chat-group-${random.uuid}  # 개별 사용자 단위로 설정하기 위해 유니크한 그룹 ID를 할당
      auto-offset-reset: earliest
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap-servers: localhost:9093

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

web-socket:
  secret:
    key: ${WEB_SOCKET_SECRET_KEY}

s3:
  credentials:
    access-key: ${S3_CREDENTIALS_ACCESS_KEY}
    secret-key: ${S3_CREDENTIALS_SECRET_KEY}
    region: ${S3_CREDENTIALS_REGION}
  bucket: ${S3_BUCKET}

cloudfront:
  url: ${CLOUD_FRONT_URL}

slack:
  webhook:
    url: ${SLACK_WEBHOOK_URL}

logging:
  level:
    root: INFO  # 로그 레벨 설정
    com.example: DEBUG  # 필요한 패키지에 대해 로그 레벨 설정

  logback:
    appenders:
      logstash:
        type: logstash # Logstash 타입 설정
        destination: "logstash:5044" # Logstash 호스트 및 포트 (Logstash가 Docker에서 실행된다면 컨테이너 이름 사용)
        encoder:
          pattern: '%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n'
          custom-fields:
            appName: ${spring.application.name} # 로그에 애플리케이션 이름 포함