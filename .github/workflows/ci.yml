name: Deploy Docker App to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-to-app-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for Application EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.APP_SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      - name: SSH to Application EC2 and Deploy Application
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.APP_EC2_HOST }}
          username: ${{ secrets.APP_EC2_USER }}
          port: 22
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker container stop my-app || true
            docker container rm my-app || true
            docker container prune -f
            docker image prune -a -f
            docker pull "${{ secrets.DOCKER_USERNAME }}"/my-app:latest
            docker run -d --rm --env-file /home/ec2-user/config/.env -p 8080:8080 --name my-app "${{ secrets.DOCKER_USERNAME }}/my-app:latest"

  deploy-to-redis-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Redis Image and Push to DockerHub
        run: |
          docker pull redis:latest
          docker tag redis:latest ${{ secrets.DOCKER_USERNAME }}/redis:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/redis:latest

      - name: Set up SSH for Redis EC2
        env:
          EC2_HOST: ${{ secrets.REDIS_EC2_HOST }}
          EC2_USER: ${{ secrets.REDIS_EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy redis-compose.yml and .env to Redis EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no redis-compose.yml ${{ secrets.REDIS_EC2_USER }}@${{ secrets.REDIS_EC2_HOST }}:/home/${{ secrets.REDIS_EC2_USER }}

      - name: SSH to Redis EC2 and Deploy Redis
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.REDIS_EC2_HOST }}
          username: ${{ secrets.REDIS_EC2_USER }}
          port: 22
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo yum update -y
            # Install docker-compose
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            # Start Redis using docker-compose
            sudo docker container stop redis || true
            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker-compose -f /home/${{ secrets.REDIS_EC2_USER }}/redis-compose.yml up -d
