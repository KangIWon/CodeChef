name: Deploy Docker App to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-to-app-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for Application EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Create .env file from secret
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

      - name: Verify .env presence
        run: |
          ls -l .env

      - name: Copy .env to Application EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/config"
          scp -i private_key.pem -o StrictHostKeyChecking=no .env $EC2_USER@$EC2_HOST:/home/$EC2_USER/config

      - name: SSH to Application EC2 and Deploy Application
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: 22
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

            docker container stop my-app || true
            docker container rm my-app || true
            docker container prune -f
            docker image prune -a -f
            docker system prune -a -f
            
            docker pull "${{ secrets.DOCKER_USERNAME }}/my-app:latest"
            
            echo "컨테이너가 시작될 때까지 대기 중..."
            sleep 30
            
            docker run -d --rm --env-file /home/ec2-user/config/.env -p 8080:8080 --name my-app "${{ secrets.DOCKER_USERNAME }}/my-app:latest"


  deploy-to-redis-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Redis Image and Push to DockerHub
        run: |
          docker pull redis:latest
          docker tag redis:latest ${{ secrets.DOCKER_USERNAME }}/redis:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/redis:latest

      - name: Set up SSH for Redis EC2
        env:
          EC2_HOST: ${{ secrets.REDIS_EC2_HOST }}
          EC2_USER: ${{ secrets.REDIS_EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy redis-compose.yml to Redis EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no redis-compose.yml ${{ secrets.REDIS_EC2_USER }}@${{ secrets.REDIS_EC2_HOST }}:/home/${{ secrets.REDIS_EC2_USER }}

      - name: SSH to Redis EC2 and Deploy Redis
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.REDIS_EC2_HOST }}
          username: ${{ secrets.REDIS_EC2_USER }}
          port: 22
          script: |
            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 시스템 업데이트 및 Docker Compose 설치
            sudo yum update -y
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Redis Docker Compose 실행
            sudo docker container stop redis || true
            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker-compose -f /home/${{ secrets.REDIS_EC2_USER }}/redis-compose.yml pull
            sudo docker-compose -f /home/${{ secrets.REDIS_EC2_USER }}/redis-compose.yml up -d
  

  deploy-to-rabbitmq-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for RabbitMQ EC2
        env:
          EC2_HOST: ${{ secrets.RABBITMQ_EC2_HOST }}
          EC2_USER: ${{ secrets.RABBITMQ_EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy .env and docker-compose.rabbitmq.yml to RabbitMQ EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no .env docker-compose.rabbitmq.yml ${{ secrets.RABBITMQ_EC2_USER }}@${{ secrets.RABBITMQ_EC2_HOST }}:/home/${{ secrets.RABBITMQ_EC2_USER }}

      - name: SSH to RabbitMQ EC2 and Deploy RabbitMQ
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.RABBITMQ_EC2_HOST }}
          username: ${{ secrets.RABBITMQ_EC2_USER }}
          port: 22
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker container stop rabbitmq || true
            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker-compose -f /home/${{ secrets.RABBITMQ_EC2_USER }}/docker-compose.rabbitmq.yml --env-file /home/${{ secrets.RABBITMQ_EC2_USER }}/.env up -d


  deploy-to-elasticsearch-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for Elasticsearch EC2
        env:
          EC2_HOST: ${{ secrets.ELASTICSEARCH_EC2_HOST }}
          EC2_USER: ${{ secrets.ELASTICSEARCH_EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy .env and docker-compose.elasticsearch.yml to Elasticsearch EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no .env docker-compose.elasticsearch.yml ${{ secrets.ELASTICSEARCH_EC2_USER }}@${{ secrets.ELASTICSEARCH_EC2_HOST }}:/home/${{ secrets.ELASTICSEARCH_EC2_USER }}

      - name: SSH to Elasticsearch EC2 and Deploy Elasticsearch
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.ELASTICSEARCH_EC2_HOST }}
          username: ${{ secrets.ELASTICSEARCH_EC2_USER }}
          port: 22
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker container stop es01 || true
            sudo docker container prune -f
            sudo docker image prune -a -f
            sudo docker-compose -f /home/${{ secrets.ELASTICSEARCH_EC2_USER }}/docker-compose.elasticsearch.yml --env-file /home/${{ secrets.ELASTICSEARCH_EC2_USER }}/.env up -d