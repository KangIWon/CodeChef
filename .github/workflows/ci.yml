name: Deploy Docker App to EC2

on:
  push:
    branches: [ "dev" ]

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 400 private_key.pem

      - name: Create .env file with secrets
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          S3_CREDENTIALS_ACCESS_KEY: ${{ secrets.S3_CREDENTIALS_ACCESS_KEY }}
          S3_CREDENTIALS_SECRET_KEY: ${{ secrets.S3_CREDENTIALS_SECRET_KEY }}
          S3_CREDENTIALS_REGION: ${{ secrets.S3_CREDENTIALS_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          echo "DB_URL=${DB_URL}" >> .env
          echo "DB_USERNAME=${DB_USERNAME}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "JWT_SECRET_KEY=${JWT_SECRET_KEY}" >> .env
          echo "S3_CREDENTIALS_ACCESS_KEY=${S3_CREDENTIALS_ACCESS_KEY}" >> .env
          echo "S3_CREDENTIALS_SECRET_KEY=${S3_CREDENTIALS_SECRET_KEY}" >> .env
          echo "S3_CREDENTIALS_REGION=${S3_CREDENTIALS_REGION}" >> .env
          echo "S3_BUCKET=${S3_BUCKET}" >> .env

      - name: Build Docker image
        run: docker build -t my-app:latest .

      - name: Save Docker image as a tar file
        run: docker save my-app:latest -o my-app.tar

      - name: Transfer Docker image and .env to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no my-app.tar ${EC2_USER}@${EC2_HOST}:~/
          scp -i private_key.pem -o StrictHostKeyChecking=no .env ${EC2_USER}@${EC2_HOST}:~/

      - name: Load Docker image and run container on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
          docker load -i ~/my-app.tar
          docker stop my-app || true
          docker rm my-app || true
          docker run -d --name my-app --env-file ~/project/.env -p 80:80 my-app:latest
          EOF
